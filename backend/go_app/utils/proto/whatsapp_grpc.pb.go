// chatbot/proto/whatsapp.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--rc3
// source: whatsapp.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WhatsAppService_CreateThread_FullMethodName             = "/whatsapp.WhatsAppService/CreateThread"
	WhatsAppService_CreateThreadAnalizer_FullMethodName     = "/whatsapp.WhatsAppService/CreateThreadAnalizer"
	WhatsAppService_GenerateResponse_FullMethodName         = "/whatsapp.WhatsAppService/GenerateResponse"
	WhatsAppService_GenerateResponseAnalizer_FullMethodName = "/whatsapp.WhatsAppService/GenerateResponseAnalizer"
)

// WhatsAppServiceClient is the client API for WhatsAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhatsAppServiceClient interface {
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error)
	CreateThreadAnalizer(ctx context.Context, in *CreateThreadAnalizerRequest, opts ...grpc.CallOption) (*CreateThreadAnalizerResponse, error)
	GenerateResponse(ctx context.Context, in *GenerateResponseRequest, opts ...grpc.CallOption) (*GenerateResponseResponse, error)
	GenerateResponseAnalizer(ctx context.Context, in *GenerateResponseAnalizerRequest, opts ...grpc.CallOption) (*GenerateResponseAnalizerResponse, error)
}

type whatsAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhatsAppServiceClient(cc grpc.ClientConnInterface) WhatsAppServiceClient {
	return &whatsAppServiceClient{cc}
}

func (c *whatsAppServiceClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error) {
	out := new(CreateThreadResponse)
	err := c.cc.Invoke(ctx, WhatsAppService_CreateThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsAppServiceClient) CreateThreadAnalizer(ctx context.Context, in *CreateThreadAnalizerRequest, opts ...grpc.CallOption) (*CreateThreadAnalizerResponse, error) {
	out := new(CreateThreadAnalizerResponse)
	err := c.cc.Invoke(ctx, WhatsAppService_CreateThreadAnalizer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsAppServiceClient) GenerateResponse(ctx context.Context, in *GenerateResponseRequest, opts ...grpc.CallOption) (*GenerateResponseResponse, error) {
	out := new(GenerateResponseResponse)
	err := c.cc.Invoke(ctx, WhatsAppService_GenerateResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsAppServiceClient) GenerateResponseAnalizer(ctx context.Context, in *GenerateResponseAnalizerRequest, opts ...grpc.CallOption) (*GenerateResponseAnalizerResponse, error) {
	out := new(GenerateResponseAnalizerResponse)
	err := c.cc.Invoke(ctx, WhatsAppService_GenerateResponseAnalizer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhatsAppServiceServer is the server API for WhatsAppService service.
// All implementations must embed UnimplementedWhatsAppServiceServer
// for forward compatibility
type WhatsAppServiceServer interface {
	CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadResponse, error)
	CreateThreadAnalizer(context.Context, *CreateThreadAnalizerRequest) (*CreateThreadAnalizerResponse, error)
	GenerateResponse(context.Context, *GenerateResponseRequest) (*GenerateResponseResponse, error)
	GenerateResponseAnalizer(context.Context, *GenerateResponseAnalizerRequest) (*GenerateResponseAnalizerResponse, error)
	mustEmbedUnimplementedWhatsAppServiceServer()
}

// UnimplementedWhatsAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWhatsAppServiceServer struct {
}

func (UnimplementedWhatsAppServiceServer) CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedWhatsAppServiceServer) CreateThreadAnalizer(context.Context, *CreateThreadAnalizerRequest) (*CreateThreadAnalizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThreadAnalizer not implemented")
}
func (UnimplementedWhatsAppServiceServer) GenerateResponse(context.Context, *GenerateResponseRequest) (*GenerateResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateResponse not implemented")
}
func (UnimplementedWhatsAppServiceServer) GenerateResponseAnalizer(context.Context, *GenerateResponseAnalizerRequest) (*GenerateResponseAnalizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateResponseAnalizer not implemented")
}
func (UnimplementedWhatsAppServiceServer) mustEmbedUnimplementedWhatsAppServiceServer() {}

// UnsafeWhatsAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhatsAppServiceServer will
// result in compilation errors.
type UnsafeWhatsAppServiceServer interface {
	mustEmbedUnimplementedWhatsAppServiceServer()
}

func RegisterWhatsAppServiceServer(s grpc.ServiceRegistrar, srv WhatsAppServiceServer) {
	s.RegisterService(&WhatsAppService_ServiceDesc, srv)
}

func _WhatsAppService_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsAppService_CreateThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsAppService_CreateThreadAnalizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadAnalizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).CreateThreadAnalizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsAppService_CreateThreadAnalizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).CreateThreadAnalizer(ctx, req.(*CreateThreadAnalizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsAppService_GenerateResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).GenerateResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsAppService_GenerateResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).GenerateResponse(ctx, req.(*GenerateResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsAppService_GenerateResponseAnalizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateResponseAnalizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).GenerateResponseAnalizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsAppService_GenerateResponseAnalizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).GenerateResponseAnalizer(ctx, req.(*GenerateResponseAnalizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WhatsAppService_ServiceDesc is the grpc.ServiceDesc for WhatsAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhatsAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whatsapp.WhatsAppService",
	HandlerType: (*WhatsAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThread",
			Handler:    _WhatsAppService_CreateThread_Handler,
		},
		{
			MethodName: "CreateThreadAnalizer",
			Handler:    _WhatsAppService_CreateThreadAnalizer_Handler,
		},
		{
			MethodName: "GenerateResponse",
			Handler:    _WhatsAppService_GenerateResponse_Handler,
		},
		{
			MethodName: "GenerateResponseAnalizer",
			Handler:    _WhatsAppService_GenerateResponseAnalizer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whatsapp.proto",
}
